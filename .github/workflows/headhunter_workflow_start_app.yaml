name: headhunter workflow
on:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9.6
      - name: Install dependecies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r ${{ secrets.PROJECT_PATH }}/requirements.txt
      - name: Lint with flake8
        run: flake8 --exclude 'venv','migrations','errors.py' ./${{ secrets.PROJECT_PATH }}
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push application to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: fsow/headhunter:latest
          context: ./${{ secrets.PROJECT_PATH }}
          file: ./Dockerfile
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Copy files from repo via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "docker-compose.yaml"
          target: ~/${{ secrets.PROJECT_PATH }}/

      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        env:
          FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
          REDIRECT_URL: ${{ secrets.REDIRECT_URL }}
          HH_BASE_URL: ${{ secrets.HH_BASE_URL }}
          HH_BASE_API_URL: ${{ secrets.HH_BASE_API_URL }}
          REG_URL_PATH: ${{ secrets.REG_URL_PATH }}
          TOKEN_URL_PATH: ${{ secrets.TOKEN_URL_PATH }}
          GRANT_TYPE_CODE: ${{ secrets.GRANT_TYPE_CODE }}
          GRANT_TYPE_REFRESH: ${{ secrets.GRANT_TYPE_REFRESH }}
          GRANT_TYPE_CC: ${{ secrets.GRANT_TYPE_CC }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          USER_PASSWORD: ${{ secrets.USER_PASSWORD }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          AUTOSEARCHES_PATH: ${{ secrets.AUTOSEARCHES_PATH }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: |
            FLASK_SECRET_KEY,REDIRECT_URL,HH_BASE_URL,REG_URL_PATH,
            TOKEN_URL_PATH,GRANT_TYPE_CODE,GRANT_TYPE_REFRESH,GRANT_TYPE_CC,
            CLIENT_ID,CLIENT_SECRET,USER_PASSWORD,PROJECT_PATH,DB_HOST,
            DB_PORT,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,TG_TOKEN,
            HH_BASE_API_URL,AUTOSEARCHES_PATH
          script: |
            cd ~/$PROJECT_PATH && \
            echo "FLASK_SECRET_KEY=$FLASK_SECRET_KEY" > .env && \
            echo "REDIRECT_URL=$REDIRECT_URL" >> .env && \
            echo "HH_BASE_URL=$HH_BASE_URL" >> .env && \
            echo "HH_BASE_API_URL=$HH_BASE_API_URL" >> .env && \
            echo "REG_URL_PATH=$REG_URL_PATH" >> .env && \
            echo "TOKEN_URL_PATH=$TOKEN_URL_PATH" >> .env && \
            echo "GRANT_TYPE_CODE=$GRANT_TYPE_CODE" >> .env && \
            echo "GRANT_TYPE_REFRESH=$GRANT_TYPE_REFRESH" >> .env && \
            echo "GRANT_TYPE_CC=$GRANT_TYPE_CC" >> .env && \
            echo "CLIENT_ID=$CLIENT_ID" >> .env && \
            echo "CLIENT_SECRET=$CLIENT_SECRET" >> .env && \
            echo "USER_PASSWORD=$USER_PASSWORD" >> .env && \
            echo "DB_HOST=$DB_HOST" >> .env && \
            echo "DB_PORT=$DB_PORT" >> .env && \
            echo "POSTGRES_USER=$POSTGRES_USER" >> .env && \
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env && \
            echo "POSTGRES_DB=$POSTGRES_DB" >> .env && \
            echo "TG_TOKEN=$TG_TOKEN" >> .env && \
            echo "AUTOSEARCHES_PATH=$AUTOSEARCHES_PATH" >> .env && \
            echo "PROJECT_PATH=$PROJECT_PATH" >> .env
            echo $USER_PASSWORD | sudo -S docker-compose pull
            echo $USER_PASSWORD | sudo -S docker-compose up -d
